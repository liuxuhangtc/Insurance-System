/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.InsuranceCompany;

import Business.InsuranceSystem;
import Business.Plan.Plan;
import Business.UserAccount.InsuranceCompanyManagerUser;
import Business.UserAccount.InsuranceCompanyUser;
import view.ReportCustom;
import view.ReportView;
import view.ManagerEditMessageView;

import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.Font;
import javax.swing.JLabel;
import java.awt.Color;

/**
 *
 * @author xuhang
 */
public class CompanyManagerJPanel extends javax.swing.JPanel {

	private InsuranceSystem system;

	private Container container;

	private JButton EditMessage;

	/**
	 * Creates new form CompanyManagerJPanel
	 */
	public CompanyManagerJPanel(Container container, InsuranceSystem system) {
		this.container = container;
		this.system = system;
		initComponents();
                ArrayList<Plan> plans = system.getPlanDirectory().getPlanList();
                ArrayList<Plan> results = new ArrayList<>();
                String managerCompany = ((InsuranceCompanyManagerUser)system.getCurrentUser()).getManagerCompany();
                for(Plan plan : plans) {
                    System.out.println(plan.getCompanyName() + " " + managerCompany);
                    if(plan.getCompanyName() != null && plan.getCompanyName().equals(managerCompany))
                        results.add(plan);
                }
		initTable(results);

	}

	private void initTable(ArrayList<Plan> plans){
		DefaultTableModel model = (DefaultTableModel) planListTable.getModel();

		model.setRowCount(0);

		Collections.sort(plans,new Comparator<Plan>() {

			@Override
			public int compare(Plan o1, Plan o2) {
				if(o1.getCreateTime()==null) {
					o1.setCreateTime("2018-01-01");
				}
				if(o2.getCreateTime()==null) {
					o2.setCreateTime("2018-01-01");
				}
				return o1.getCreateTime().compareTo(o2.getCreateTime());
			}
		});

		for (Plan plan : plans) {
			if(!plan.getStatus().equals("pending")){
				continue;
			}
			InsuranceCompanyUser companyUser=(InsuranceCompanyUser) plan.getCreateUser();
			String plannerCom = companyUser.getPlannerCompany()==null ? "Manager":companyUser.getPlannerCompany();
			InsuranceCompanyManagerUser managerUser=(InsuranceCompanyManagerUser) system.getCurrentUser();
			String comName = managerUser.getManagerCompany()==null ? "Manager":managerUser.getManagerCompany();
			if(!plannerCom.equals(comName)) {
				continue;
			}
			Object[] row = new Object[6];
			row[0] = plan.getTitle();
			row[1] = plan.getPlanId();
			row[2] = plan.getPrice();
			row[3] = plan.getOfferField();
			row[4] = plan.getOfferAgeRange();
			row[5] = plan.getCovertimerange();

			model.addRow(row);
		}
                /*
		DefaultTableModel bestPlanModel = (DefaultTableModel) planListTable.getModel();
		for (int i=0;i<3;i++) {
			Plan plan = SortUntil.sortPlan(system).get(i);

			Object[] row = new Object[6];
			row[0] = plan.getTitle();
			row[1] = plan.getPlanId();
			row[2] = plan.getPrice();
			row[3] = plan.getOfferField();
			row[4] = plan.getOfferAgeRange();
			row[5] = plan.getCovertimerange();

			bestPlanModel.addRow(row);
		}
                */
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		
		ImageIcon myinfoIcon = new ImageIcon("./img/personal.png");
		ImageIcon cusIcon = new ImageIcon("./img/customer.png");
		ImageIcon managerIcon = new ImageIcon("./img/manager.png");
		ImageIcon bestIcon = new ImageIcon("./img/best.png");
		ImageIcon worstIcon = new ImageIcon("./img/worst.png");

		jScrollPane1 = new javax.swing.JScrollPane();
		planListTable = new javax.swing.JTable();
		planListTable.setFont(new Font("Arial", Font.BOLD, 14));
		approveButton = new javax.swing.JButton();
		approveButton.setFont(new Font("Arial", Font.BOLD, 14));
		rejectjButton = new javax.swing.JButton();
		rejectjButton.setFont(new Font("Arial", Font.BOLD, 14));
		jButton1 = new javax.swing.JButton(cusIcon);
		jButton1.setFont(new Font("Arial", Font.BOLD, 14));

		bestCust = new JButton(bestIcon);
		bestCust.setText("Top 3 Customers");
		bestCust.setFont(new Font("Arial", Font.BOLD, 14));
		WorstCust = new JButton(worstIcon);
		WorstCust.setText("Worst 3 Customer");
		WorstCust.setFont(new Font("Arial", Font.BOLD, 14));
		BestPlan = new JButton(bestIcon);
		BestPlan.setText("Best 3 Plans");
		BestPlan.setFont(new Font("Arial", Font.BOLD, 14));
		WorstPlan = new JButton(worstIcon);
		WorstPlan.setText("Worst 3 Plans");
		WorstPlan.setFont(new Font("Arial", Font.BOLD, 14));
		EditMessage = new JButton(myinfoIcon);
		EditMessage.setText("My Info");
		EditMessage.setFont(new Font("Arial", Font.BOLD, 14));

		BestPlan.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				ReportView reportView = new ReportView(system,"best");
			}
		});
		WorstPlan.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				ReportView reportView = new ReportView(system,"worst");
			}
		});
		
		bestCust.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				ReportCustom reportView = new ReportCustom(system,"best");
			}
		});
		WorstCust.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				ReportCustom reportView = new ReportCustom(system,"worst");
			}
		});

		EditMessage.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				ManagerEditMessageView memv = new ManagerEditMessageView((InsuranceCompanyManagerUser)system.getCurrentUser(), system);
			}
		});

		planListTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object [][] {
					{null, null, null, null, null, null},
					{null, null, null, null, null, null},
					{null, null, null, null, null, null},
					{null, null, null, null, null, null}
				},
				new String [] {
						"Title", "Plan id", "Price", "Offer Field", "Offer Age Range", "Cover Time Range"
				}
				) {
			boolean[] canEdit = new boolean [] {
					false, false, false, false, false, false
			};

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit [columnIndex];
			}
		});


		planListTable.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				planListTableMouseClicked(evt);
			}
		});
		jScrollPane1.setViewportView(planListTable);
		if (planListTable.getColumnModel().getColumnCount() > 0) {
			planListTable.getColumnModel().getColumn(0).setResizable(false);
		}

		approveButton.setText("Approve");
		approveButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				approveButtonActionPerformed(evt);
			}
		});

		rejectjButton.setText("Reject");
		rejectjButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				rejectjButtonActionPerformed(evt);
			}
		});

		jButton1.setText("Go to Customer Apply List");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});
		
		lblInsuranceManagerWork = new JLabel(managerIcon);
		lblInsuranceManagerWork.setText("Insurance Manager Work Area");
		lblInsuranceManagerWork.setForeground(Color.BLUE);
		lblInsuranceManagerWork.setFont(new Font("Arial", Font.BOLD, 18));
		
		lblPlannerApplyList = new JLabel("Planner Apply List");
		lblPlannerApplyList.setFont(new Font("Arial", Font.BOLD, 12));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		layout.setHorizontalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addContainerGap()
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
							.addGroup(layout.createParallelGroup(Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
									.addComponent(EditMessage)
									.addGap(18)
									.addComponent(approveButton)
									.addGap(18)
									.addComponent(rejectjButton))
								.addGroup(layout.createSequentialGroup()
									.addComponent(jButton1)
									.addGap(18)
									.addComponent(bestCust)
									.addGap(18)
									.addComponent(WorstCust)
									.addGap(18)
									.addComponent(BestPlan)
									.addGap(18)
									.addComponent(WorstPlan)))
							.addContainerGap(291, Short.MAX_VALUE))
						.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
							.addGroup(layout.createParallelGroup(Alignment.TRAILING)
								.addGroup(Alignment.LEADING, layout.createSequentialGroup()
									.addComponent(lblInsuranceManagerWork)
									.addPreferredGap(ComponentPlacement.RELATED, 615, Short.MAX_VALUE)
									.addComponent(lblPlannerApplyList))
								.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 948, Short.MAX_VALUE))
							.addGap(25))))
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addGap(74)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblInsuranceManagerWork)
						.addComponent(lblPlannerApplyList))
					.addGap(18)
					.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 166, GroupLayout.PREFERRED_SIZE)
					.addGap(36)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(jButton1)
						.addComponent(bestCust)
						.addComponent(WorstCust)
						.addComponent(BestPlan)
						.addComponent(WorstPlan))
					.addGap(18)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(EditMessage)
						.addComponent(approveButton)
						.addComponent(rejectjButton))
					.addContainerGap(316, Short.MAX_VALUE))
		);
		this.setLayout(layout);
	}// </editor-fold>//GEN-END:initComponents

	private void approveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveButtonActionPerformed
		// TODO add your handling code here:

		int planIndex = planListTable.getSelectedRow();
		if(planIndex!=-1) {
			String id = planListTable.getValueAt(planListTable.getSelectedRow(), 1).toString();
			Plan plan = system.getPlanDirectory().findPlanById(Integer.valueOf(id));
			plan.setStatus("approve");
			JOptionPane.showMessageDialog(null, "Plan approved!");
			DefaultTableModel model = (DefaultTableModel)planListTable.getModel();
			model.removeRow(planIndex);
		}
	}//GEN-LAST:event_approveButtonActionPerformed

	private void planListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_planListTableMouseClicked
		// TODO add your handling code here:
	}//GEN-LAST:event_planListTableMouseClicked

	private void rejectjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectjButtonActionPerformed
		// TODO add your handling code here:
		int planIndex = planListTable.getSelectedRow();
                if(planIndex < 0){
                    JOptionPane.showMessageDialog(null, "Please select a row!");
                    return;
                }
		String id = planListTable.getValueAt(planListTable.getSelectedRow(), 1).toString();
		Plan plan = system.getPlanDirectory().findPlanById(Integer.valueOf(id));
		plan.setStatus("reject");
		JOptionPane.showMessageDialog(null, "Plan reject!");
		DefaultTableModel model = (DefaultTableModel) planListTable.getModel();
		model.removeRow(planIndex);
	}//GEN-LAST:event_rejectjButtonActionPerformed

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		// TODO add your handling code here:
		container.removeAll();
		container.add(new CustomerApplyListJPanel(container, system));
		container.revalidate();
	}//GEN-LAST:event_jButton1ActionPerformed


	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton approveButton;
	private javax.swing.JButton bestCust,WorstCust,BestPlan,WorstPlan;
	private javax.swing.JButton jButton1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable planListTable;
	private javax.swing.JButton rejectjButton;
	private JLabel lblInsuranceManagerWork;
	private JLabel lblPlannerApplyList;
	// End of variables declaration//GEN-END:variables
}
