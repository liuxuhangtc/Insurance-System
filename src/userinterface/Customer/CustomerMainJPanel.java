/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Customer;

import Business.InsuranceSystem;
import Business.DB4OUtil.DB4OUtil;
import Business.Plan.Plan;
import Business.UserAccount.CustomerUser;
import Business.UserAccount.UserAccount;
import CustomerApply.folder.CustomerPlan;
import view.AddView;
import view.SelfPlanListView;

import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.Font;
import java.awt.Color;

/**
 *
 * @author xuhang
 */
public class CustomerMainJPanel extends javax.swing.JPanel {

	private InsuranceSystem system;

	private Container container;
	private JButton SelfOrder;
    private JButton searchBtn;
    private JTextField searchContent;
	/**
	 * Creates new form CustomerMainJPanel
	 */
	/** Creates new form AdminWorkAreaJPanel */
	public CustomerMainJPanel(Container container, InsuranceSystem system) {
		this.system = system;
		initComponents();
		this.container = container;
                ArrayList<Plan> plans = system.getPlanDirectory().getPlanList();
                ArrayList<Plan> results = new ArrayList<>();
                String type = ((CustomerUser)system.getCurrentUser()).getType();
                System.out.println("User Type: " + type);
                for(Plan plan : plans) {
                    if(type.equals("ALL") || plan.getOfferCustomerType().equals(type) || plan.getOfferCustomerType().equals("ALL"))
                        results.add(plan);
                }
		initTable(results, system.getCurrentUser());
	}

	private void initTable(ArrayList<Plan> plans, UserAccount customer) {
		DefaultTableModel model = (DefaultTableModel) planListTable.getModel();
		model.setRowCount(0);

		for (Plan plan : plans) {
			
			if (!plan.getStatus().equals("market approve")) {
				continue;
			}
			
			Object[] row = new Object[7];
			row[0] = plan.getTitle();
			row[1] = plan.getPlanId();
			row[2] = plan.getPrice();
			row[3] = plan.getOfferField();
			row[4] = plan.getOfferAgeRange();
			row[5] = plan.getCovertimerange();
			row[6] = plan.getMark();
			model.addRow(row);
		}

		DefaultTableModel userModel = (DefaultTableModel) userInfoTable.getModel();
		userModel.setRowCount(0);

		CustomerUser cu = (CustomerUser) customer;
		Object[] userInfo = new Object[6];
		userInfo[0] = cu.getUsername();
		userInfo[1] = cu.getPassword();
		userInfo[2] = cu.getAge();
		userInfo[3] = cu.getInformation();

		userModel.addRow(userInfo);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

		ImageIcon searchIcon = new ImageIcon("./img/search.png");
		searchBtn = new JButton(searchIcon);
		searchBtn.setText("Search");
		searchBtn.setFont(new Font("Arial", Font.BOLD, 14));
		searchContent = new JTextField();
		searchContent.setFont(new Font("Arial", Font.BOLD, 14));
		searchContent.setPreferredSize(new Dimension(30, 100));
		
		ImageIcon storeIcon = new ImageIcon("./img/store.png");
		ImageIcon cartIcon = new ImageIcon("./img/cart.png");
		ImageIcon personalIcon = new ImageIcon("./img/personal.png");
		
		jScrollPane1 = new javax.swing.JScrollPane();
		planListTable = new javax.swing.JTable();
		planListTable.setFont(new Font("Arial", Font.BOLD, 14));
		jLabel2 = new javax.swing.JLabel(storeIcon);
		jLabel2.setForeground(Color.BLUE);
		jLabel2.setFont(new Font("Arial", Font.BOLD, 18));
		jButton1 = new javax.swing.JButton();
		jButton1.setFont(new Font("Arial", Font.BOLD, 14));
		jButton2 = new javax.swing.JButton();
		jButton2.setFont(new Font("Arial", Font.BOLD, 14));
		jLabel1 = new javax.swing.JLabel(personalIcon);
		jLabel1.setForeground(Color.BLUE);
		jLabel1.setFont(new Font("Arial", Font.BOLD, 18));
		jScrollPane2 = new javax.swing.JScrollPane();
		userInfoTable = new javax.swing.JTable();
		userInfoTable.setFont(new Font("Arial", Font.BOLD, 14));
		jButton3 = new javax.swing.JButton();
		jButton3.setFont(new Font("Arial", Font.BOLD, 14));
		
		SelfOrder = new JButton(cartIcon);
		SelfOrder.setText("My Orders");
		SelfOrder.setFont(new Font("Arial", Font.BOLD, 14));
		
		SelfOrder.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
              	SelfPlanListView selfPlanListView = new SelfPlanListView(system);
			}
		});

		planListTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object [][] {
					{null, null, null, null, null, null},
					{null, null, null, null, null, null},
					{null, null, null, null, null, null},
					{null, null, null, null, null, null}
				},
				new String [] {
						"Title", "Plan id", "Price", "Offer Field", "Offer Age Range", "Cover Time Range", "Rating"
				}));
		
		jScrollPane1.setViewportView(planListTable);

		jLabel2.setText("Insurance Market");

		jButton1.setText("Apply");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		jButton2.setText("View Apply List");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		jLabel1.setText("Personal Information");


		userInfoTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object [][] {
					{null, null, null, null}
				},
				new String [] {
						"username", "password", "age", "information"
				}
				) {
			Class[] types = new Class [] {
					java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
			};
			boolean[] canEdit = new boolean [] {
					false, true, true, true
			};

			public Class getColumnClass(int columnIndex) {
				return types [columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit [columnIndex];
			}
		});
		jScrollPane2.setViewportView(userInfoTable);

		jButton3.setText("Update");
		jButton3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton3ActionPerformed(evt);
			}
		});

		searchBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {

				ArrayList<Plan> plans = system.getPlanDirectory().getPlanList();
                ArrayList<Plan> results = new ArrayList<>();
				String type = ((CustomerUser)system.getCurrentUser()).getType();
                for(Plan plan : plans) {
                    if(type.equals("ALL") || plan.getOfferCustomerType().equals(type) || plan.getOfferCustomerType().equals("ALL"))
						if(plan.getTitle().indexOf(searchContent.getText()) != -1)
                        	results.add(plan);
				}
				
				DefaultTableModel model = (DefaultTableModel) planListTable.getModel();
				model.setRowCount(0);

				for (Plan plan : results) {
					
					if (!plan.getStatus().equals("market approve")) {
						continue;
					}
					
					Object[] row = new Object[7];
					row[0] = plan.getTitle();
					row[1] = plan.getPlanId();
					row[2] = plan.getPrice();
					row[3] = plan.getOfferField();
					row[4] = plan.getOfferAgeRange();
					row[5] = plan.getCovertimerange();
					row[6] = plan.getMark();
					model.addRow(row);
				}

			}
		});


		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		layout.setHorizontalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addGap(37)
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addComponent(jButton3)
						.addGroup(layout.createParallelGroup(Alignment.TRAILING)
							.addGroup(layout.createSequentialGroup()
								.addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 180, GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(ComponentPlacement.RELATED, 393, Short.MAX_VALUE)
								.addComponent(searchContent, 100, 100, 100)
								.addGap(18)
								.addComponent(searchBtn)
								.addPreferredGap(ComponentPlacement.RELATED))
							.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 772, GroupLayout.PREFERRED_SIZE)
							.addGroup(Alignment.LEADING, layout.createSequentialGroup()
								.addComponent(SelfOrder)
								.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jButton1)
								.addGap(18)
								.addComponent(jButton2)))
						.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabel1))
					.addContainerGap(118, Short.MAX_VALUE))
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addGap(67)
					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
						.addGroup(layout.createSequentialGroup()
							.addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
							.addGap(18))
						.addGroup(layout.createSequentialGroup()
							.addGroup(layout.createParallelGroup(Alignment.BASELINE)
								.addComponent(searchContent, 30, 30, 30)
								.addComponent(searchBtn))
							.addPreferredGap(ComponentPlacement.UNRELATED)))
					.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 269, GroupLayout.PREFERRED_SIZE)
					.addGap(32)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(SelfOrder)
						.addComponent(jButton1)
						.addComponent(jButton2))
					.addGap(21)
					.addComponent(jLabel1)
					.addGap(18)
					.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
					.addGap(18)
					.addComponent(jButton3)
					.addContainerGap(48, Short.MAX_VALUE))
		);
		this.setLayout(layout);
	}// </editor-fold>//GEN-END:initComponents

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		// TODO add your handling code here:
		int planIndex = planListTable.getSelectedRow();
		if(planIndex!=-1) {
			String id = planListTable.getValueAt(planListTable.getSelectedRow(), 1).toString();
			Plan plan = system.getPlanDirectory().findPlanById(Integer.valueOf(id));
			CustomerUser user = (CustomerUser)system.getCurrentUser();

			CustomerPlan customerPlan = new CustomerPlan();
			customerPlan.setCustomer(user);
			customerPlan.setPlan(plan);
			customerPlan.setStatus("pending");
			system.getCustomerPlanDirectory().addCustomerPlan(customerPlan);
		}
		AddView addview = new AddView((CustomerUser) system.getCurrentUser());

	}//GEN-LAST:event_jButton1ActionPerformed

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
		// TODO add your handling code here:
		container.removeAll();
		container.add(new CustomerRequestJPanel(container, system));
		container.revalidate();
	}//GEN-LAST:event_jButton2ActionPerformed

	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
		// TODO add your handling code here:
		DefaultTableModel userModel = (DefaultTableModel) userInfoTable.getModel();

		String username = String.valueOf(userModel.getValueAt(0, 0));
		String password = String.valueOf(userModel.getValueAt(0, 1));
		String age = String.valueOf(userModel.getValueAt(0, 2));
		String infomation = String.valueOf(userModel.getValueAt(0, 3));

		CustomerUser cu = (CustomerUser)system.getUserAccountDirectory().findUserByUsername(username);
		cu.setPassword(password);
		cu.setAge(Integer.valueOf(age));
		cu.setInformation(infomation);

		system.getUserAccountDirectory().update(cu);
		system.setCurrentUser(cu);
		DB4OUtil.getInstance().storeSystem(system);
		JOptionPane.showMessageDialog(null, "Update successfully!");
	}//GEN-LAST:event_jButton3ActionPerformed

	public interface CallBack{
		void markFinish();
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable planListTable;
    private javax.swing.JTable userInfoTable;
    // End of variables declaration//GEN-END:variables
}
